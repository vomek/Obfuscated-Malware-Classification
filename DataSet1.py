# -*- coding: utf-8 -*-
"""
Created on Tue Feb  4 14:09:18 2020

@author: Wamiq

Creating dataset

First convert 2D to 1D array
l2 normalization
70-30 train test split
50-20 train-validate
filters 16,32 and 64
filter length 3
CNN with one layer
maximum pooling length 2
"""
from PIL import Image

Image.MAX_IMAGE_PIXELS = None
from skimage.io import imread
import cv2
import os, glob, numpy
from sklearn.preprocessing import Normalizer,LabelEncoder
from sklearn.model_selection import train_test_split,KFold
import pickle as pkl

def createPickle(pickleFile, file):
    """
    # create Pickle file for data with this function
    # pickleFile = name of picklefile created
    # file= file or data that need to convert into pickle
    """
    os.chdir(r'D:\NEWDataset')
    with open(pickleFile, 'wb') as fileObject:
        pkl.dump(file, fileObject)
    fileObject.close()



imgs = []
imgX = []
imgY = []
# the parent folder with sub-folders
os.chdir(r'D:\Dataset3') 
# List of family names
list_fams = os.listdir(os.getcwd())


"""
im = imread("test.png")
im=im.flatten()
res = cv2.resize(im, dsize=(32, 32), interpolation=cv2.INTER_CUBIC)
"""

"""
    reading images from all folder
    resizing images to 32X32
    making 1D array of images
    creating list of 1D array image and type
"""
    
for i in range(len(list_fams)):
    os.chdir(list_fams[i])
    image_list=glob.glob('*.png')
    for im in range(len(image_list)):
        img = imread(image_list[im])
        img = cv2.resize(img, dsize=(32, 32), interpolation=cv2.INTER_CUBIC)
        img=img.flatten()
        imgs.append((img,list_fams[i]))
        imgX.append(img)
        imgY.append(list_fams[i])
    os.chdir('..')
    
"""
    #performing L2 normalization
"""

Data_normalizer = Normalizer(norm='l2').fit(imgX)
Data_normalized = Data_normalizer.transform(imgX)


"""
    Converting String data into numeric
"""
labelencoder = LabelEncoder() 
imgY = labelencoder.fit_transform(imgY) 


"""
    #Train Test Split  (train 70% test 30%)
"""
X_train, X_test, y_train, y_test = train_test_split(imgX, imgY, test_size = 0.3)
"""
for train_index, test_index in split(imgX):
    #print("TRAIN:", train_index, "TEST:", test_index)
    X_train, X_test = imgX[train_index], imgX[test_index]
    y_train, y_test = imgY[train_index], imgY[test_index]
#X, X_test, y, y_test = train_test_split(imgX, imgY, test_size = 0.3)
"""

"""
    #Train Validate Split  (train 70% validate 30%)
"""
X_train, X_validate, y_train, y_validate = train_test_split(imgX, imgY, test_size = 0.3)
#kf=KFold(n_splits=10, random_state=None, shuffle=False)
"""
for train_index, validate_index in split(X_train):
    #print("TRAIN:", train_index, "TEST:", test_index)
    X_train, X_validate = imgX[train_index], imgX[validate_index]
    y_train, y_validate = imgY[train_index], imgY[validate_index]
"""

createPickle("X3TrainPickle.pkl",X_train)
createPickle("y3TrainPickle.pkl",y_train)
"""
createPickle("XnewValidatePickle.pkl",X_validate)
createPickle("ynewValidatePickle.pkl",y_validate)
"""
createPickle("X3TestPickle.pkl",X_test)   
createPickle("y3TestPickle.pkl",y_test)



#createPickle("test.pkl",imgX)






























































